
1) def add(a,b): return a+b
   add2 = lambda a,b: a+b

2) if isclose(, arange(point_and_antis.values - 2, 180, 0.01)).any():

3) reversed_dict = {x: y for y, x in dictionary.items()}
   result = [reversed_dict[x] for x in list(set(dictionary.values()) & set(lst))]

4) if 'Hi' in string:
     print 'Success!'

5)  print(squared_evens)
    <map object at 0x7f661e5dba20>
    print(list(squared_evens))   # [0, 4, 16, 36, 64]
========================================================================================================================
numbers = [1,2,3,4,5]
squares = map(lambda x: x*x, numbers)
map - принимает в качестве аргументов функцию и список и применяет функцию к каждому элементу списка

numbers = [1,2,3,4,5]
numbers_under_4 = filter(lambda x: x < 4, numbers)
# numbers_under_4 = [1,2,3]
filter - принимает два параметра и возвращает объект-итератор. Первый аргумент этой функции - какая-либо
другая функция, а второй - последовательность (строки, списки и кортежи), итератор или объект,
поддерживающий итерацию.

numbers = [1,2,3,4,5]
numbers_under_4 = [number for number in numbers if number < 4]
# numbers_under_4 = [1,2,3]

numbers = [1,2,3,4,5]
squares = map(lambda x: x*x, filter(lambda x: x < 4, numbers))
# squares is = [1,4,9]

numbers = [1,2,3,4,5]
squares = [number*number for number in numbers if number < 4]
# square = [1,4,9]
Синтаксис генератора списков: [ element for variable(s) in list if condition ]
list — любой итерируемый элемент
variable(s) — переменная или переменные, которые приравниваются к текущему элементу списка, аналогично циклу for
condition — инлайновое выражение: если оно равно true, элемент добавляется в результат
element — инлайновое выражение, результат которого используется как элемент списка-результата

Выражение-генератор
numbers = (1,2,3,4,5) # мы стремимся к эффективной работе, поэтому используем кортеж вместо списка ;)
squares_under_10 = (number*number for number in numbers if number*number < 10)
# squares_under_10 - generator object, из которого можно получить следующее значение, вызвав метод .next()
for square in squares_under_10:
    print square,
#выводит '1 4 9'
=======================================================================================================================
Функция - генератор:
def countdown(num):
...     print('Starting')
...     while num > 0:
...         yield num
...         num -= 1
...
>>> val = countdown(5)
>>> val
<generator object countdown at 0x10213aee8>
next(val)
Starting
5
>>> next(val)
4
>>> next(val)
3
>>> next(val)
2
>>> next(val)
1
>>> next(val)
StopIteration
========================================================================================================================
Выражеения-генераторы:
>>> my_list = ['a', 'b', 'c', 'd']
>>> gen_obj = (x for x in my_list)
>>> for val in gen_obj:
...     print(val)
...
a
b
c
d

>>> import sys
>>> g = (i * 2 for i in range(10000) if i % 3 == 0 or i % 5 == 0)
>>> print(sys.getsizeof(g))
72
========================================================================================================================